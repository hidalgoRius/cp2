---
- name: 'OCI Image creation for webservers'
  hosts: ContainerVM
  remote_user: "{{ podman_ssh_login }}"
  become: true
  vars_files:
    - vars/01_02_vars.yaml
  vars: #estas variables son locales y se necesitan exclusivamente en el ámbito de este playbook.
    oci_folder: "/home/{{ podman_ssh_login }}/oci_webserver"
    pkey_path: "{{ oci_folder}}/localhost.key"
    csr_path: "{{ oci_folder}}/localhost.csr"
    crt_path: "{{ oci_folder}}/localhost.crt"
    web_source: "{{ oci_folder }}/web_source"
    #    ansible_python_interpreter: /usr/bin/python3 #force to use python3 binary to process this playbook. If not, some modules did work as expected.
  tasks:
    - name: Create a folder for containing image files "{{ oci_folder }}"
      ansible.builtin.file:
        path: "{{ oci_folder }}"
        state: directory
        mode: '0755'
    - name: Create a user "{{ htpasswd_user }}" to restrict web access through .hpasswd file.
      community.general.htpasswd:
        path: "{{ oci_folder}}/.creds"
        name: "{{ htpasswd_user }}"
        password: "{{ htpasswd_passwd }}"
        owner: root
        group: root
        mode: '0644'
 
    - name: Generate an OpenSSL private key 2048 and store it on "{{ pkey_path }}"
      community.crypto.openssl_privatekey:
        path: "{{ pkey_path }}"
        size: 2048

    - name: Generate an OpenSSL CSR and store it on "{{ csr_path }}"
      community.crypto.openssl_csr:
        path: "{{ csr_path }}"
        privatekey_path: "{{ pkey_path }}"
        country_name: ES
        organization_name: casopractico2
        email_address: jdoe@gmail.com
        common_name: www.unir.com

    - name: Generate a Self Signed OpenSSL certificate and store it on "{{ crt_path }}"
      community.crypto.x509_certificate:
        path: "{{ crt_path }}"
        privatekey_path: "{{ pkey_path }}"
        csr_path: "{{ csr_path }}"
        provider: selfsigned

    - name: Create a folder for web source code "{{ web_source }}"
      ansible.builtin.file:
         path: "{{ web_source }}"
         state: directory
         mode: '0755'

    - name: Git clone web source code "{{ web_repo }}"
      ansible.builtin.git:
        repo: "{{ web_repo }}"
        dest: "{{ web_source }}"
        version: "{{ web_repo_branch }}"
        force: true

    - name: Template a httpd.j2 to "{{ oci_folder }}/httpd.conf"
      ansible.builtin.template:
        src: templates/httpd.j2
        dest: "{{ oci_folder }}/httpd.conf"
        owner: root
        group: root
        mode: '0644'
    - name: Template a Containerfile.j2 to "{{ oci_folder }}/Containerfile"
      ansible.builtin.template:
        src: templates/Containerfile.j2
        dest: "{{ oci_folder }}/Containerfile"
        owner: root
        group: root
        mode: '0644'
    - name: Template a .htaccess.j2 to "{{ web_source }}/.htaccess"
      ansible.builtin.template:
        src: templates/htaccess.j2
        dest: "{{ web_source }}/.htaccess" #Lo dejamos aqui porque luego montamos este path en el contenedor. Así esta carpeta tiene permisops de lectura y el contenedor lo dejamos más restructivo.
        owner: root
        group: root
        mode: '0644'
    - name: Login to registry "{{ az_acr_url }}" 
      containers.podman.podman_login:
         username: "{{ az_acr_user }}"
         password: "{{ az_acr_passwd }}"
         registry: "{{ az_acr_url }}"
    - name: Pull an image "{{ httpd_image }}"
      containers.podman.podman_image:
        name: "{{ httpd_image }}"
    - name: Build OCI Image "{{ image_name }} and upload to {{ az_acr_url }}/{{ acr_repository }}"
      containers.podman.podman_image:
         name: "{{ image_name }}"
         path: "{{ oci_folder }}"
         tag: "{{ image_tag }}"
         #build:
         #  cache: false
         #  force_rm: true
         #  format: oci
         #  annotation:
         #    app: apache2
         #    function: web-server
         #    info: Web server OCI for CasoPractico2 Unir
         push: true
         username: "{{ az_acr_user }}"
         password: "{{ az_acr_passwd }}"
         push_args:
           dest: "{{ az_acr_url }}/{{ acr_repository }}"
